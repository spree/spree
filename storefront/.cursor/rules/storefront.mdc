---
alwaysApply: true
---

# Spree Storefront Rules

## Controller Standards
- Storefront controllers inherit from `Spree::StoreController`
- Handle customer-facing functionality
- Implement proper SEO and caching
- Use secure session handling

```ruby
# ✅ Storefront controller structure
class Spree::ProductsController < Spree::StoreController
  before_action :find_product, only: [:show]
  
  def index
    @products = current_store.products.available.includes(:images, :variants)
    @products = @products.ransack(params[:q]).result if params[:q].present?
    @products = @products.page(params[:page])
  end

  def show
    @variants = @product.variants.includes(:images, :option_values)
    @product_properties = @product.product_properties.includes(:property)
  end

  private

  def find_product
    @product = current_store.products.friendly.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    redirect_to products_path, alert: Spree.t('product_not_found')
  end
end
```

## View Standards
- Use Tailwind CSS for styling
- Follow responsive design principles
- Implement proper semantic HTML
- Include accessibility attributes

```erb
<!-- ✅ Proper storefront view structure -->
<article class="product-details" itemscope itemtype="http://schema.org/Product">
  <header class="product-header">
    <h1 class="text-3xl font-bold text-gray-900" itemprop="name">
      <%= @product.name %>
    </h1>
    
    <div class="mt-2">
      <span class="text-2xl font-semibold text-gray-900" itemprop="price">
        <%= @product.display_price %>
      </span>
    </div>
  </header>

  <div class="product-description mt-6" itemprop="description">
    <%= simple_format(@product.description) %>
  </div>
</article>
```

## JavaScript & Stimulus

- Try to use Turbo for all AJAX requests
- Use Stimulus for interactive components that cannot be handled by Turbo
- Place Stimulus controllers in `app/javascript/controllers/spree/storefront/`
- Follow progressive enhancement principles
- Minimize JavaScript dependencies

```javascript
// ✅ Storefront Stimulus controller
import { Controller } from "@hotwired/stimulus"
import { post } from "@rails/request.js"

export default class extends Controller {
  static targets = ["quantity", "addToCart"]
  static values = { 
    productId: Number,
    variantId: Number 
  }

  connect() {
    this.updateAddToCartState()
  }

  updateQuantity(event) {
    const quantity = parseInt(event.target.value)
    this.updateAddToCartState()
  }

  async addToCart(event) {
    event.preventDefault()
    
    const response = await post('/line_items', {
      body: {
        variant_id: this.variantIdValue,
        quantity: this.quantityTarget.value
      }
    })

    if (response.ok) {
      const data = await response.json
      this.handleAddToCartResponse(data)
    }
  }
}

## SEO Standards
- Include proper meta tags
- Use structured data markup
- Implement canonical URLs
- Optimize page titles and descriptions

```erb
<!-- ✅ SEO meta tags -->
<% content_for :title, @product.meta_title.presence || @product.name %>
<% content_for :description, @product.meta_description.presence || truncate(@product.description, length: 160) %>

<%= content_tag :div, itemscope: true, itemtype: "http://schema.org/Product" do %>
  <meta itemprop="name" content="<%= @product.name %>" />
  <meta itemprop="description" content="<%= @product.description %>" />
  <meta itemprop="sku" content="<%= @product.sku %>" />
  <!-- Product content -->
<% end %>
```

## Performance Standards
- Implement fragment caching
- For images please use `spree_image_tag`, `spree_image_url` and `spree_image_path` helpers which automatically serve optimized WEBP images
- Minimize HTTP requests
- Implement lazy loading

## Form Standards
- Use Rails form helpers
- Implement CSRF protection
- Add proper validation feedback
- Handle errors gracefully

## Helper Standards
- Place helpers in `app/helpers/spree/`
- Use helpers for view-specific logic
- Keep helpers simple and testable

## Navigation Standards
- Implement responsive navigation
- Use proper ARIA labels
- Support keyboard navigation
- Include search functionality

## Cart & Checkout Standards
- Use AJAX for cart updates
- Implement guest checkout
- Handle payment errors gracefully
- Provide clear progress indicators

## Mobile Standards
- Mobile-first responsive design
- Touch-friendly interface elements
- Optimize for mobile performance
- Test on multiple device sizes

## Accessibility Standards
- Include proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios
- Provide alternative text for images

## Testing Standards
- Test critical user journeys
- Use feature specs for integration testing
- Test responsive behavior
- Include accessibility testing

```ruby
# ✅ Storefront feature spec
require 'spec_helper'

RSpec.feature 'Product browsing', type: :feature, js: true do
  let!(:product) { create(:product, name: 'Test Product') }

  scenario 'viewing product details' do
    visit spree.product_path(product)
    
    expect(page).to have_content('Test Product')
    expect(page).to have_button('Add to Cart')
    expect(page).to have_css('[itemtype="http://schema.org/Product"]')
  end

  scenario 'adding product to cart' do
    visit spree.product_path(product)
    
    click_button 'Add to Cart'
    
    expect(page).to have_content('Item added to cart')
    expect(page).to have_css('.cart-count', text: '1')
  end
end
```

## Translation Files
- Place storefront translations in `storefront/config/locales/en.yml`
- Use customer-friendly language
- Include error messages and validation text

## Security Standards
- Sanitize user inputs
- Implement rate limiting for forms
- Use HTTPS for sensitive operations
- Validate all form submissions

# Spree Storefront Rules

## Controller Standards
- Storefront controllers inherit from `Spree::StoreController`
- Handle customer-facing functionality
- Implement proper SEO and caching
- Use secure session handling

```ruby
# ✅ Storefront controller structure
class Spree::ProductsController < Spree::StoreController
  before_action :find_product, only: [:show]
  
  def index
    @products = current_store.products.available.includes(:images, :variants)
    @products = @products.ransack(params[:q]).result if params[:q].present?
    @products = @products.page(params[:page])
  end

  def show
    @variants = @product.variants.includes(:images, :option_values)
    @product_properties = @product.product_properties.includes(:property)
  end

  private

  def find_product
    @product = current_store.products.friendly.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    redirect_to products_path, alert: Spree.t('product_not_found')
  end
end
```

## View Standards
- Use Tailwind CSS for styling
- Follow responsive design principles
- Implement proper semantic HTML
- Include accessibility attributes

```erb
<!-- ✅ Proper storefront view structure -->
<article class="product-details" itemscope itemtype="http://schema.org/Product">
  <header class="product-header">
    <h1 class="text-3xl font-bold text-gray-900" itemprop="name">
      <%= @product.name %>
    </h1>
    
    <div class="mt-2">
      <span class="text-2xl font-semibold text-gray-900" itemprop="price">
        <%= @product.display_price %>
      </span>
    </div>
  </header>

  <div class="product-description mt-6" itemprop="description">
    <%= simple_format(@product.description) %>
  </div>
</article>
```

## JavaScript & Stimulus

- Try to use Turbo for all AJAX requests
- Use Stimulus for interactive components that cannot be handled by Turbo
- Place Stimulus controllers in `app/javascript/controllers/spree/storefront/`
- Follow progressive enhancement principles
- Minimize JavaScript dependencies

```javascript
// ✅ Storefront Stimulus controller
import { Controller } from "@hotwired/stimulus"
import { post } from "@rails/request.js"

export default class extends Controller {
  static targets = ["quantity", "addToCart"]
  static values = { 
    productId: Number,
    variantId: Number 
  }

  connect() {
    this.updateAddToCartState()
  }

  updateQuantity(event) {
    const quantity = parseInt(event.target.value)
    this.updateAddToCartState()
  }

  async addToCart(event) {
    event.preventDefault()
    
    const response = await post('/line_items', {
      body: {
        variant_id: this.variantIdValue,
        quantity: this.quantityTarget.value
      }
    })

    if (response.ok) {
      const data = await response.json
      this.handleAddToCartResponse(data)
    }
  }
}

## SEO Standards
- Include proper meta tags
- Use structured data markup
- Implement canonical URLs
- Optimize page titles and descriptions

```erb
<!-- ✅ SEO meta tags -->
<% content_for :title, @product.meta_title.presence || @product.name %>
<% content_for :description, @product.meta_description.presence || truncate(@product.description, length: 160) %>

<%= content_tag :div, itemscope: true, itemtype: "http://schema.org/Product" do %>
  <meta itemprop="name" content="<%= @product.name %>" />
  <meta itemprop="description" content="<%= @product.description %>" />
  <meta itemprop="sku" content="<%= @product.sku %>" />
  <!-- Product content -->
<% end %>
```

## Performance Standards
- Implement fragment caching
- For images please use `spree_image_tag`, `spree_image_url` and `spree_image_path` helpers which automatically serve optimized WEBP images
- Minimize HTTP requests
- Implement lazy loading

## Form Standards
- Use Rails form helpers
- Implement CSRF protection
- Add proper validation feedback
- Handle errors gracefully

## Helper Standards
- Place helpers in `app/helpers/spree/`
- Use helpers for view-specific logic
- Keep helpers simple and testable

## Navigation Standards
- Implement responsive navigation
- Use proper ARIA labels
- Support keyboard navigation
- Include search functionality

## Cart & Checkout Standards
- Use AJAX for cart updates
- Implement guest checkout
- Handle payment errors gracefully
- Provide clear progress indicators

## Mobile Standards
- Mobile-first responsive design
- Touch-friendly interface elements
- Optimize for mobile performance
- Test on multiple device sizes

## Accessibility Standards
- Include proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios
- Provide alternative text for images

## Testing Standards
- Test critical user journeys
- Use feature specs for integration testing
- Test responsive behavior
- Include accessibility testing

```ruby
# ✅ Storefront feature spec
require 'spec_helper'

RSpec.feature 'Product browsing', type: :feature, js: true do
  let!(:product) { create(:product, name: 'Test Product') }

  scenario 'viewing product details' do
    visit spree.product_path(product)
    
    expect(page).to have_content('Test Product')
    expect(page).to have_button('Add to Cart')
    expect(page).to have_css('[itemtype="http://schema.org/Product"]')
  end

  scenario 'adding product to cart' do
    visit spree.product_path(product)
    
    click_button 'Add to Cart'
    
    expect(page).to have_content('Item added to cart')
    expect(page).to have_css('.cart-count', text: '1')
  end
end
```

## Translation Files
- Place storefront translations in `storefront/config/locales/en.yml`
- Use customer-friendly language
- Include error messages and validation text

## Security Standards
- Sanitize user inputs
- Implement rate limiting for forms
- Use HTTPS for sensitive operations
- Validate all form submissions
